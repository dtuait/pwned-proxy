services:
  app:
    # ─── build the Django image ───────────────────────────────────────────
    build:
      context: .
      dockerfile: .devcontainer/Dockerfile.prod

    # ─── runtime configuration ────────────────────────────────────────────
    environment:
      # will be injected by Coolify; useful for Django ALLOWED_HOSTS logic
      SERVICE_FQDN_APP: ${SERVICE_FQDN_APP}
      POSTGRES_DB:       ${POSTGRES_DB:-db}
      POSTGRES_USER:     ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      HIBP_API_KEY:      ${HIBP_API_KEY:-}
      DJANGO_DEBUG:      ${DJANGO_DEBUG:-false}
      DJANGO_SETTINGS_MODULE: pwned_proxy.WARNING_import_settings_with_DEBUG_enabled

    depends_on:
      db:
        condition: service_healthy

    # tell Traefik which internal port to forward to
    expose:
      - "8000"

    labels:
      - "traefik.enable=true"
      # make the service discoverable on the port we just exposed
      - "traefik.http.services.pwnedproxy.loadbalancer.server.port=8000"
      # Coolify **automatically** creates the router & TLS certificate that
      # matches the domain you set in the UI, so no extra router label needed

  db:
    image: postgres:14-alpine
    environment:
      POSTGRES_DB:       ${POSTGRES_DB:-db}
      POSTGRES_USER:     ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 10

volumes:
  postgres_data:
