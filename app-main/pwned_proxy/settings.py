"""
Django settings for pwned_proxy project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from envutils import ensure_env

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Ensure required environment variables are present. This will load an existing
# `.env` file if found or create one with generated defaults on first run.
ensure_env(BASE_DIR)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY')


AZURE_AD_TENANT_ID = os.environ.get('PUBLIC_AZURE_AD_TENANT_ID', '')
AZURE_AD_CLIENT_ID = os.environ.get('AZURE_APP_AIT_SOC_GRAPH_VICRE_REGISTRATION_CLIENT_ID', '')

# The other variables are mostly for your future reference, e.g. if you want to call Graph:
AZURE_AD_CLIENT_SECRET = os.environ.get('AZURE_APP_AIT_SOC_GRAPH_VICRE_REGISTRATION_CLIENT_SECRET', '')
AZURE_AD_RESOURCE = os.environ.get('AZURE_APP_AIT_SOC_GRAPH_VICRE_REGISTRATION_RESOURCE', '')
AZURE_AD_GRANT_TYPE = os.environ.get('AZURE_APP_AIT_SOC_GRAPH_VICRE_REGISTRATION_GRANT_TYPE', '')



# SECURITY WARNING: don't run with debug turned on in production!
# Parse DJANGO_DEBUG from environment variables. Defaults to False
_debug_env = os.environ.get("DJANGO_DEBUG", "false").lower()
DEBUG = _debug_env in {"1", "true", "yes"}

ALLOWED_HOSTS = [
    "localhost",
    "127.0.0.1",
    "dtuaitsoc.ngrok.dev",
    "api.dtuaitsoc.ngrok.dev",
    "api.haveibeenpwned.security.ait.dtu.dk",
]

# Allow additional hosts to be configured via environment variables.
# This supports deployments on services like Coolify that provide the
# domain through SERVICE_FQDN_APP or a custom DJANGO_ALLOWED_HOSTS
# variable.
extra_hosts = os.environ.get("DJANGO_ALLOWED_HOSTS")
if extra_hosts:
    ALLOWED_HOSTS += [h.strip() for h in extra_hosts.split(",") if h.strip()]

service_fqdn = os.environ.get("SERVICE_FQDN_APP")
if service_fqdn:
    ALLOWED_HOSTS.append(service_fqdn)


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'drf_yasg',
    'api',
]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        # "api.authentication.AzureAdJWTAuthentication",  # Bearer tokens first
        "api.authentication.APIKeyAuthentication"       # X-API-Key next
    ],
    # Possibly other DRF settings...
    "DEFAULT_THROTTLE_CLASSES": [
        "api.throttling.APIKeyRateThrottle"
    ],
    "DEFAULT_THROTTLE_RATES": {
        "apikey": "1000/day"
    }
}


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'pwned_proxy.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pwned_proxy.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('POSTGRES_DB', 'db'),
        'USER': os.getenv('POSTGRES_USER', 'postgres'),
        'PASSWORD': os.getenv('POSTGRES_PASSWORD'),
        'HOST': 'db',  # matches docker-compose service name
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



CSRF_TRUSTED_ORIGINS = [
    "https://api.dtuaitsoc.ngrok.dev",
    "https://dtuaitsoc.ngrok.dev",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
    # add other domains if necessary
    "https://api.haveibeenpwned.security.ait.dtu.dk",
]

CORS_ALLOW_ALL_ORIGINS = True
